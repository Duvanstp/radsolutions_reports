name: Django Tests and Linting

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies in GitHub Actions runner
      run: |
        python -m pip install --upgrade pip
        pip install isort flake8 black pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Update Makefile for Docker Compose V2
      run: |
        # Actualizar el Makefile para usar 'docker compose' en lugar de 'docker-compose'
        sed -i 's/docker-compose/docker compose/g' makefile
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Create .env file
      run: |
        echo "DATABASE_NAME=radsolutions_db" >> .env
        echo "DATABASE_USER=radsolutions_user" >> .env
        echo "DATABASE_PASSWORD=radsolutions_pass" >> .env
        echo "DATABASE_HOST=db" >> .env
        echo "DATABASE_PORT=5432" >> .env
        echo "DEBUG=True" >> .env
        echo "DJANGO_SECRET_KEY='django-insecure-k#cb*25^f8d9js*%rnkjc24_^r^(8#-@$m*8ia1-zn*ytg=#u*'" >> .env
    
    - name: Build Docker containers using make
      run: |
        make up
    
    - name: Run linting checks
      run: |
        docker compose run --rm web bash -c "pip install isort flake8 black && isort . --check --profile black && black . --check && flake8 ."

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Esperando que PostgreSQL esté listo..."
        # Esperar hasta 30 segundos para que PostgreSQL esté listo
        timeout=30
        while ! docker compose exec db pg_isready -h localhost -U radsolutions_user -d radsolutions_db; do
          timeout=$((timeout-1))
          if [ $timeout -eq 0 ]; then
            echo "Timeout esperando a PostgreSQL"
            exit 1
          fi
          echo "Esperando que PostgreSQL esté listo... ${timeout}s restantes"
          sleep 1
        done
        echo "PostgreSQL está listo!"
    
    - name: Run Django tests
      run: |
        # Usar SQLite en memoria para los tests
        docker compose run -e DATABASE_ENGINE=django.db.backends.sqlite3 -e DATABASE_NAME=':memory:' --rm web bash -c "python manage.py test"
    
    - name: Stop containers using make
      run: |
        make down 